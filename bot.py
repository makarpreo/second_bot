from datetime import date, timedelta
import telebot
from telegram_bot_calendar import DetailedTelegramCalendar, WMonthTelegramCalendar
from telebot import types
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
import config
import re

# === CONFIGURATION ===


TOKEN = config.TOKEN
GROUP_CHAT_ID = config.chat_id

bot = telebot.TeleBot(TOKEN)
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}


def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            'current_car_id': 0,
            'chat_id': 0,
            'username': f"user_{user_id}",
            'notes_data': {},
            'editing_note_id': None,
            'editing_note_text': None,
            'appointment': {'problem': '', 'vin': '', 'parts': 0, 'time': '', 'date': ''}
        }
    return user_sessions[user_id]


@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    username = message.from_user.username or message.from_user.first_name or f"user_{user_id}"
    user_data['username'] = username
    user_data['chat_id'] = message.chat.id
    show_second_menu(user_data['chat_id'], user_id)


def show_second_menu(chat_id, user_id):
    user_data = get_user_data(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1)

    btn_set_id = types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
        callback_data="command:/sign_up"
    )
    btn_add_note = types.InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
        callback_data="command:/change_data"
    )

    markup.add(btn_set_id, btn_add_note)
    bot.send_message(
        chat_id,
        "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('command:'))
def handle_command_callback(call):
    user_id = call.message.from_user.id
    user_data = get_user_data(user_id)
    chat_id = call.message.chat.id
    user_data['chat_id'] = chat_id

    command = call.data.split(':')[1]

    class MockMessage:
        def __init__(self, chat_id, text, user_id):
            self.chat = type('Chat', (), {'id': chat_id})()
            self.text = text
            self.from_user = type('User', (), {'id': user_id})()

    mock_message = MockMessage(chat_id, command, user_id)
    if command == '/set_time':
        set_time(mock_message)
    if command == '/set_problem':
        set_problem(mock_message)
    if command == '/set_vin':
        set_vin(mock_message)
    if command == '/sign_up':
        sign_up(mock_message)
    if command == '/set_parts':
        set_problem(mock_message)

    bot.answer_callback_query(call.id, f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")

@bot.callback_query_handler(func=lambda call: call.data == 'change_data')
def change_data(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    markup = types.InlineKeyboardMarkup(row_width=1)

    btn_change_time = types.InlineKeyboardButton(
        text="–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è",
        callback_data="command:/change_time"
    )
    btn_change_vin = types.InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å VIN",
        callback_data="command:/change_vin"
    )
    btn_change_problem = types.InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É",
        callback_data="command:/change_problem"
    )
    btn_change_parts = types.InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–ø—á–∞—Å—Ç–µ–π",
        callback_data="command:/change_parts"
    )

    markup.add(btn_change_parts, btn_change_time, btn_change_problem, btn_change_vin)
    bot.send_message(
        user_data['chat_id'],
        "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>\n\n",
        parse_mode='HTML',
        reply_markup=markup
    )
    # bot.register_next_step_handler(message, lambda m: add_note_to_car(m, user_id))


@bot.callback_query_handler(func=lambda call: call.data == '/sign_up')
def sign_up(message):
    min_date = date.today()
    max_date = min_date + timedelta(days=14)
    calendar, step = WMonthTelegramCalendar(min_date=min_date, max_date=max_date, locale='ru').build()
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def handle_calendar(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    min_date = date.today()
    max_date = min_date + timedelta(days=14)
    result, key, step = DetailedTelegramCalendar(min_date=min_date, max_date=max_date).process(call.data)

    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", user_data['chat_id'], call.message.message_id, reply_markup=key)
    elif result:
        user_data['date'] = str(result).replace('-', '.')
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {result}", user_data['chat_id'], call.message.message_id)
        times = (10, 11, 12, 13, 14, 15, 16, 17, 18)
        markup = types.InlineKeyboardMarkup(row_width=1)

        for time in times:
            btn_car = types.InlineKeyboardButton(text=f"{time}:00", callback_data=f'time!{time}')
            markup.add(btn_car)

        if len(times) != 0:
            bot.send_message(call.message.chat.id,
                             f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=markup)

        else:
            bot.send_message(call.message.chat.id, f"–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É")
            bot.register_next_step_handler(call.message, sign_up)

@bot.callback_query_handler(func=lambda call: call.data.startswith('time!'))
def handle_time(call):
    data = call.data.split('!')
    time = int(data[1])
    user_id = call.from_user.id
    print(time)
    user_data = get_user_data(user_id)

    # ‚úÖ –í—Å—ë –ø—Ä–æ—à–ª–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ VIN
    user_data['time'] = time
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ VIN –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", reply_markup=markup)
    bot.register_next_step_handler(call.message, set_vin)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö


def set_time(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    time_text = message.text.strip()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if 'appointment' not in user_data:
        user_data['appointment'] = {}

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ hh:00)
    if not re.match(r"^(0\d|1\d|2[0-3]):00$", time_text):
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:00 –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        resend_time_options(message.chat.id, user_data)
        return  # ‚õî –ù–ï –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∞–ª—å—à–µ

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    available_times = set()

    available_times_formatted = {f"{t:02d}:00" for t in available_times}

    if time_text not in available_times_formatted:
        bot.send_message(message.chat.id, "‚õî –≠—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.")
        resend_time_options(message.chat.id, user_data)
        return  # ‚õî –ù–ï –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∞–ª—å—à–µ

    # ‚úÖ –í—Å—ë –ø—Ä–æ—à–ª–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ VIN
    user_data['time'] = time_text
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ VIN –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", reply_markup=markup)


def resend_time_options(chat_id, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–Ω–æ–≤–æ"""
    times = set()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for time in sorted(times):
        markup.add(types.KeyboardButton(f"{time:02d}:00")).row()
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=markup)


def set_vin(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data['appointment']['vin'] = "–Ω–µ —É–∫–∞–∑–∞–Ω"
        print(user_id, 'vin', user_data['appointment'])
    else:
        user_data['appointment']['vin'] = message.text
        print(user_id, 'vin', user_data['appointment'])

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É
    msg = bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å:")
    bot.register_next_step_handler(msg, set_problem)


def set_problem(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    user_data['appointment']['problem'] = message.text
    print(user_id, 'problem', user_data['appointment'])

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∑–∞–ø—á–∞—Å—Ç–∏ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    yes_btn = types.InlineKeyboardButton("–î–∞", callback_data="set_parts:yes")
    no_btn = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="set_parts:no")
    markup.add(yes_btn, no_btn)

    bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –ª–∏ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('set_parts:'))
def handle_set_parts(call):
    data = call.data.split(':')
    is_need = 1 if data[1] == 'yes' else 0
    user_id = call.from_user.id
    user_data = get_user_data(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—á–∞—Å—Ç—è—Ö
    user_data['appointment']['parts'] = is_need
    print(user_id, 'parts', user_data['appointment'])

    # –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    confirm(user_id)
    bot.answer_callback_query(call.id)


def confirm(user_id):
    user_data = get_user_data(user_id)
    appointment = user_data['appointment']
    print(user_id, 'confirm', user_data['appointment'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö
    summary = "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
    summary += f"üìÖ –î–∞—Ç–∞: {user_data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    summary += f"‚è∞ –í—Ä–µ–º—è: {user_data.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    summary += f"üöó VIN: {appointment.get('vin', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    summary += f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {appointment.get('problem', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    summary += f"üì¶ –ù—É–∂–Ω—ã –∑–∞–ø—á–∞—Å—Ç–∏: {'–î–∞' if appointment.get('parts') == 1 else '–ù–µ—Ç'}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    markup = types.InlineKeyboardMarkup()
    confirm_btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes")
    cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
    markup.add(confirm_btn, cancel_btn)

    bot.send_message(user_data['chat_id'], summary, reply_markup=markup)



# –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—è—Ç—å
def which_type_to_change(message, type):
    return 0


if __name__ == '__main__':
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
