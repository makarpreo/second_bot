from datetime import date, timedelta
import telebot
from telegram_bot_calendar import DetailedTelegramCalendar, WMonthTelegramCalendar
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton
)
import config
from db import vin_info, Table, Appointment
from yghbujn import duration
from –ª—è–ª—è–ª—è import MyTranslationCalendar
import telebot
import traceback
import logging
from typing import Optional
from back import *
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
# === CONFIGURATION ===

TOKEN = config.TOKEN
GROUP_CHAT_ID = config.test_chat_id

bot = telebot.TeleBot(config.TEST_TOKEN)
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}
ADMIN_ID = 997097309


# –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏–º callback –¥–∞–Ω–Ω—ã–µ

#
# @bot.callback_query_handler(func=lambda call: True)
# def debug_callback(call):
#     print(f"Full callback data: {call.data}")

def send_error_to_admin(error_message: str, user_info):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        message = f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ\n\n"
        message += f"–û—à–∏–±–∫–∞: {error_message}\n\n"

        if user_info:
            message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"

        bot.send_message(ADMIN_ID, message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")


def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""

    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            error_traceback = traceback.format_exc()
            error_message = f"{type(e).__name__}: {str(e)}"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            user_info = None
            if args and hasattr(args[0], 'from_user'):
                user = args[0].from_user
                user_info = f"@{user.username} ({user.first_name} {user.last_name or ''}) ID: {user.id}"

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {error_message}")
            logger.error(f"Traceback: {error_traceback}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            full_error_info = f"{error_message}\n\n```\n{error_traceback}\n```"
            send_error_to_admin(full_error_info, user_info)
            #
            # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            # if args and hasattr(args[0], 'chat'):
            #     try:
            #         bot.send_message(
            #             args[0].chat.id,
            #             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω."
            #         )
            #     except:
            #         pass

    return wrapper


def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            'current_car_id': 0,
            'chat_id': 0,
            'username': f"user_{user_id}",
            'notes_data': {},
            'editing_note_id': None,
            'editing_note_text': None,
            'appointment': {'problem': '', 'vin': '', 'parts': 0, 'time': '', 'date': '', 'problem_type': ''},
            'is_editing': False,  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'is_asked': False,
            'is_skip': False
        }
    return user_sessions[user_id]


@bot.callback_query_handler(func=lambda call: call.data.startswith('command:'))
@error_handler
def handle_command_callback(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    chat_id = call.message.chat.id
    user_data['chat_id'] = chat_id

    command = call.data.split(':')[1]

    class MockMessage:
        def __init__(self, chat_id, text, user_id):
            self.chat = type('Chat', (), {'id': chat_id})()
            self.text = text
            self.from_user = type('User', (), {'id': user_id})()

    mock_message = MockMessage(chat_id, command, user_id)

    # if command == '/set_time':
    #     set_time(mock_message)
    if command == '/set_problem':
        set_problem(mock_message)
    # elif command == '/set_vin':
    #     set_vin(mock_message)
    elif command == '/sign_up':
        sign_up(mock_message)
    elif command == '/change_appointment':
        change_appointment(mock_message)
    elif command == '/change_time':
        change_time(mock_message)
    elif command == '/change_vin':
        change_vin(mock_message)
    elif command == '/change_problem':
        change_problem(mock_message)
    elif command == '/change_parts':
        change_parts(mock_message)
    elif command == '/cancel_changes':
        cancel_changes(call)
    elif command == '/change_phone':
        change_phone(mock_message)

    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in handle_command_callback: {e}")


@bot.message_handler(commands=['start'])
@error_handler
def start_command(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    username = message.from_user.username or message.from_user.first_name or f"user_{user_id}"
    user_data['username'] = username
    user_data['chat_id'] = message.chat.id
    show_second_menu(user_data['chat_id'])


@error_handler
def show_second_menu(chat_id):
    markup = InlineKeyboardMarkup(row_width=1)

    btn_set_id = InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
        callback_data="command:/sign_up"
    )
    btn_change_appointment = InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",
        callback_data="command:/change_appointment"
    )

    markup.add(btn_set_id, btn_change_appointment)
    bot.send_message(
        chat_id,
        "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n",
        parse_mode='HTML',
        reply_markup=markup
    )


@error_handler
def sign_up(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['is_editing'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    user_data['is_asked'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏

    min_date = date.today()
    max_date = min_date + timedelta(days=14)
    calendar, step = MyTranslationCalendar(min_date=min_date, max_date=max_date, locale='ru').build()
    bot.send_message(user_data['chat_id'],
                     f"<b>–ó–∞—è–≤–∫—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±—É–¥–µ—Ç –∏–Ω–æ–π \n<b><u>(—Å–±, –≤—Å - –Ω–µ—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏)</u></b>",
                     parse_mode='HTML', reply_markup=calendar)


@bot.callback_query_handler(func=lambda call: call.data.startswith('my_0'))
@error_handler
def handle_appointment_calendar(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in handle_appointment_calendar: {e}")
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    min_date = date.today()
    max_date = min_date + timedelta(days=14)

    result, key, step = MyTranslationCalendar(min_date=min_date, max_date=max_date, locale='ru').process(call.data)

    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", user_data['chat_id'], call.message.message_id, reply_markup=key)
    elif result:
        if result.weekday() >= 5:
            bot.send_message(user_data['chat_id'], '–°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –Ω–µ—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å')
            return

        user_data['appointment']['date'] = str(result)
        result = str(result)
        bot.edit_message_text(f"1/7\n–î–∞—Ç–∞: {result[-2] + result[-1] + '.' + result[5] + result[6] + '.' + result[:4]}",
                              user_data['chat_id'], call.message.message_id)

        db = Table()
        times = db.get_workload_by_date(target_date=user_data['appointment']['date'])
        markup = InlineKeyboardMarkup(row_width=1)
        for time, status in times.items():
            if status == 0:
                btn_time = InlineKeyboardButton(text=f"{time}:00 üü©", callback_data=f'time!{time}')
                markup.add(btn_time)
            if status == 1:
                btn_time = InlineKeyboardButton(text=f"{time}:00 üü®", callback_data=f'time!{time}')
                markup.add(btn_time)
            if status == 2:
                btn_time = InlineKeyboardButton(text=f"{time}:00 üüß", callback_data=f'time!{time}')
                markup.add(btn_time)
            if status == 3:
                btn_time = InlineKeyboardButton(text=f"{time}:00 üü•", callback_data=f'time!{time}')
                markup.add(btn_time)

        if times:
            bot.send_message(call.message.chat.id,
                             f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–∏—Ç—å—Å—è\nüü©-–Ω–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—åüü®-—Å—Ä–µ–¥–Ω—è—èüüß-–≤—ã—Å–æ–∫–∞—èüü•-–ø–æ–ª–Ω–∞—è",
                             reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, f"–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É")
            sign_up(call.message)


# –í–†–ï–ú–Ø
@bot.callback_query_handler(func=lambda call: call.data.startswith('time!'))
@error_handler
def handle_time(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in handle time: {e}")
    try:
        data = call.data.split('!')
        time_val = int(data[1])
        user_id = call.from_user.id
        user_data = get_user_data(user_id)

        user_data['appointment']['time'] = f"{time_val:02d}:00"

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"2/7\n–í—Ä–µ–º—è: {time_val:02d}:00"
        )

        if user_data['is_editing']:
            confirm(user_id)
        else:
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
            bot.register_next_step_handler(msg, set_model)

    except Exception as e:
        print(f"Error in handle_time: {e}")


@error_handler
def change_time(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['is_editing'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    min_date = date.today()
    max_date = min_date + timedelta(days=14)
    calendar, step = MyTranslationCalendar(min_date=min_date, max_date=max_date, locale='ru').build()
    bot.send_message(user_data['chat_id'], f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É", reply_markup=calendar)


# def set_time(message):
#     user_id = message.from_user.id
#     user_data = get_user_data(user_id)
#     time_text = message.text.strip()
#     user_data['appointment']['time'] = time_text
#     bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
#     bot.register_next_step_handler(message, set_model)

# –í–†–ï–ú–Ø

# –ú–ê–†–ö–ê –ú–û–î–ï–õ–¨
@error_handler
def set_model(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['appointment']['model'] = message.text
    bot.send_message(
        user_data['chat_id'],
        f"3/7\n–ú–æ–¥–µ–ª—å: {user_data['appointment']['model']}"
    )
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                                    callback_data='skip_vin'))
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ VIN\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –∏–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã -–Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                     reply_markup=markup)
    bot.register_next_step_handler(message, set_vin)


@error_handler
def change_model(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['is_editing'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏e
    bot.send_message(user_data['chat_id'], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å:")
    bot.register_next_step_handler(message, update_phone)


@error_handler
def update_model(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['appointment']['model'] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.send_message(
        user_data['chat_id'],
        f"–ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {user_data['appointment']['model']}"
    )

    confirm(user_id)


# –ú–ê–†–ö–ê –ú–û–î–ï–õ–¨


# VIN
@bot.callback_query_handler(func=lambda call: call.data == 'skip_vin')
@error_handler
def skip_vin(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in skip_vin: {e}")

    try:
        user_id = call.from_user.id
        user_data = get_user_data(user_id)
        user_data['appointment']['vin'] = "–Ω–µ —É–∫–∞–∑–∞–Ω"

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
        bot.send_message(
            user_data['chat_id'],
            f"4/7\nVIN: {user_data['appointment']['vin']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
        if not user_data['is_asked']:
            user_data['is_asked'] = True
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(InlineKeyboardButton(text='–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', callback_data='type:electr'))
            markup.add(InlineKeyboardButton(text='–ü–æ–¥–≤–µ—Å–∫–∞', callback_data='type:podv'))
            markup.add(InlineKeyboardButton(text='–î–≤–∏–≥–∞—Ç–µ–ª—å', callback_data='type:dvig'))
            markup.add(InlineKeyboardButton(text='–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂', callback_data='type:shinomontazh'))
            markup.add(InlineKeyboardButton(text='–ù–µ –∑–Ω–∞—é', callback_data='type:idk'))

            bot.send_message(
                call.message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å",
                reply_markup=markup
            )
            # –£–±–∏—Ä–∞–µ–º register_next_step_handler —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º callback'–∏

    except Exception as e:
        logger.error(f"Error in skip_vin: {e}")


@error_handler
def set_vin(message):
    try:
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        if not user_data['is_asked']:
            user_data['is_asked'] = True
            user_data['appointment']['vin'] = message.text

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.send_message(
                user_data['chat_id'],
                f"4/7\nVIN: {user_data['appointment']['vin']}"
            )

            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(InlineKeyboardButton(text='–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', callback_data='type:electr'))
            markup.add(InlineKeyboardButton(text='–ü–æ–¥–≤–µ—Å–∫–∞', callback_data='type:podv'))
            markup.add(InlineKeyboardButton(text='–î–≤–∏–≥–∞—Ç–µ–ª—å', callback_data='type:dvig'))
            markup.add(InlineKeyboardButton(text='–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂', callback_data='type:shinomontazh'))
            markup.add(InlineKeyboardButton(text='–ù–µ –∑–Ω–∞—é', callback_data='type:idk'))

            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å",
                reply_markup=markup
            )

    except Exception as e:
        logger.error(f"Error in set_vin: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('type:'))
@error_handler
def type_of_problem(call):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback, –Ω–æ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        bot.answer_callback_query(call.id)
    except Exception as e:
        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        logger.warning(f"Callback query expired: {e}")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    try:
        data = call.data.split(':')
    except Exception as ex:
        print(ex)
    finally:
        print(call.data.split(':'))
    match data[1]:
        case 'electr':
            user_data['appointment']['problem_type'] = "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞"
        case 'podv':
            user_data['appointment']['problem_type'] = "–ü–æ–¥–≤–µ—Å–∫–∞"
        case 'dvig':
            user_data['appointment']['problem_type'] = "–î–≤–∏–≥–∞—Ç–µ–ª—å"
        case 'shinomontazh':
            user_data['appointment']['problem_type'] = "–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂"
        case 'idk':
            user_data['appointment']['problem_type'] = "–ù–µ –∑–Ω–∞—é/–î—Ä—É–≥–æ–µ"
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )

    msg = bot.send_message(call.message.chat.id, '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É')  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: call.message.chat.id
    bot.register_next_step_handler(msg, set_problem)
    return 1


@error_handler
def change_vin(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['is_editing'] = True
    markup = InlineKeyboardMarkup(row_width=1)
    # markup.add(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
    #                                 callback_data=''))
    bot.send_message(user_data['chat_id'], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π VIN", reply_markup=markup)
    bot.register_next_step_handler(message, update_vin)


@error_handler
def update_vin(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data['appointment']['vin'] = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    else:
        user_data['appointment']['vin'] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.send_message(
        user_data['chat_id'],
        f"VIN –æ–±–Ω–æ–≤–ª–µ–Ω: {user_data['appointment']['vin']}"
    )

    confirm(user_id)


# VIN

# –ü–†–û–ë–õ–ï–ú–ê
@error_handler
def set_problem(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['appointment']['problem'] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.send_message(
        user_data['chat_id'],
        f"5/7\n–ü—Ä–æ–±–ª–µ–º–∞: {user_data['appointment']['problem']}"
    )

    markup = InlineKeyboardMarkup()
    yes_btn = InlineKeyboardButton("–î–∞", callback_data="set_parts:yes")
    no_btn = InlineKeyboardButton("–ù–µ—Ç", callback_data="set_parts:no")
    idk = InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data="set_parts:idk")
    markup.add(yes_btn, no_btn, idk)
    bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –ª–∏ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('upd_type:'))
@error_handler
def upd_type_of_problem(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in skip_vin: {e}")
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    data = call.data.split(':')
    match data[1]:
        case 'electr':
            user_data['appointment']['problem_type'] = "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞"
        case 'podv':
            user_data['appointment']['problem_type'] = "–ü–æ–¥–≤–µ—Å–∫–∞"
        case 'dvig':
            user_data['appointment']['problem_type'] = "–î–≤–∏–≥–∞—Ç–µ–ª—å"
        case 'shinomontazh':
            user_data['appointment']['problem_type'] = "–î–≤–∏–≥–∞—Ç–µ–ª—å"
        case 'nothing':
            user_data['appointment']['problem_type'] = "-"

    bot.send_message(user_data['chat_id'], text='–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É')
    bot.register_next_step_handler(call.message, update_problem)


@error_handler
def change_problem(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['is_editing'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text='–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', callback_data='upd_type:electr'))
    markup.add(InlineKeyboardButton(text='–ü–æ–¥–≤–µ—Å–∫–∞', callback_data='upd_type:podv'))
    markup.add(InlineKeyboardButton(text='–î–≤–∏–≥–∞—Ç–µ–ª—å', callback_data='upd_type:dvig'))
    markup.add(InlineKeyboardButton(text='–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂', callback_data='upd_type:shinomontazh'))
    bot.send_message(user_data['chat_id'], "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=markup)


@error_handler
def update_problem(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['appointment']['problem'] = message.text
    bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_data['appointment']['problem']}", user_data['chat_id'],
                          message.message_id)
    bot.send_message(user_data['chat_id'], "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    confirm(user_id)


# –ü–†–û–ë–õ–ï–ú–ê

# –ó–ê–ü–ß–ê–°–¢–ò
@bot.callback_query_handler(func=lambda call: call.data.startswith('set_parts:'))
@error_handler
def handle_set_parts(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in skip_vin: {e}")
    data = call.data.split(':')
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    match data[1]:
        case 'yes':
            is_need = '–Ω—É–∂–Ω—ã'
        case 'no':
            is_need = '–Ω–µ –Ω—É–∂–Ω—ã'
        case 'idk':
            is_need = '–Ω–µ —É–≤–µ—Ä–µ–Ω'
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    bot.send_message(user_data['chat_id'], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏")
    user_data['appointment']['parts'] = is_need
    bot.edit_message_text(f"6/7\n–ó–∞–ø—á–∞—Å—Ç–∏: {user_data['appointment']['parts']}", user_data['chat_id'],
                          call.message.message_id)
    bot.register_next_step_handler(call.message, set_phone)


@error_handler
def change_parts(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['is_editing'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    markup = InlineKeyboardMarkup()
    yes_btn = InlineKeyboardButton("–î–∞", callback_data="update_parts:yes")
    no_btn = InlineKeyboardButton("–ù–µ—Ç", callback_data="update_parts:no")
    idk = InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data="update_parts:idk")
    markup.add(yes_btn, no_btn, idk)

    bot.send_message(user_data['chat_id'], "–ù—É–∂–Ω–æ –ª–∏ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('update_parts:'))
@error_handler
def handle_update_parts(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in handle_update_parts: {e}")

    data = call.data.split(':')
    parts_status = {
        'yes': '–Ω—É–∂–Ω—ã',
        'no': '–Ω–µ –Ω—É–∂–Ω—ã',
        'idk': '–Ω–µ —É–≤–µ—Ä–µ–Ω'
    }

    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    user_data['appointment']['parts'] = parts_status.get(data[1], '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.send_message(
        user_data['chat_id'],
        f"–ó–∞–ø—á–∞—Å—Ç–∏: {user_data['appointment']['parts']}"
    )

    confirm(user_id)


# –ó–ê–ü–ß–ê–°–¢–ò

# –ù–û–ú–ï–†
@error_handler
def set_phone(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['appointment']['phone'] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.send_message(
        user_data['chat_id'],
        f"7/7\n–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['appointment']['phone']}"
    )

    confirm(user_id)


@error_handler
def change_phone(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['is_editing'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    bot.send_message(user_data['chat_id'], "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä:")
    bot.register_next_step_handler(message, update_phone)


@error_handler
def update_phone(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['appointment']['phone'] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.send_message(
        user_data['chat_id'],
        f"–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: {user_data['appointment']['phone']}"
    )

    confirm(user_id)


# –ù–û–ú–ï–†

# –ó–ê–Ø–í–ö–ê
@error_handler
def change_appointment(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['is_editing'] = True
    if not user_data['appointment'] or not user_data['appointment'].get('date'):
        bot.send_message(user_data['chat_id'], "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    markup = InlineKeyboardMarkup(row_width=1)

    btn_change_time = InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è",
        callback_data="command:/change_time"
    )
    btn_change_vin = InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å VIN",
        callback_data="command:/change_vin"
    )
    btn_change_problem = InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É",
        callback_data="command:/change_problem"
    )
    btn_change_parts = InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–ø—á–∞—Å—Ç–µ–π",
        callback_data="command:/change_parts"
    )
    btn_change_phone = InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä",
        callback_data="command:/change_phone"
    )

    markup.add(btn_change_time, btn_change_vin, btn_change_problem, btn_change_parts, btn_change_phone)

    appointment = user_data['appointment']
    current_info = (
        f"üìã <b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {appointment.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {appointment.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üöó VIN: {appointment.get('vin', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {appointment.get('problem', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üì¶ –ù—É–∂–Ω—ã –∑–∞–ø—á–∞—Å—Ç–∏: {appointment.get('parts', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )

    bot.send_message(
        user_data['chat_id'],
        current_info,
        parse_mode='HTML',
        reply_markup=markup
    )


@error_handler
def cancel_changes(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in skip_vin: {e}")
    user_id = call.from_user.id
    user_data = get_user_data(user_id)

    bot.send_message(user_data['chat_id'], "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
    show_second_menu(user_data['chat_id'])


@error_handler
def confirm(user_id):
    user_data = get_user_data(user_id)
    # ap = Appointment(0)
    # info = ap.info_by_user(user_id=user_id)
    markup = InlineKeyboardMarkup()
    appointment = user_data['appointment']
    markup.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete'), )
    # date, time, problem, mechanic, duration, lift, vin = info
    date = user_data['appointment']['date']
    text = '–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å:\n'
    text += f"üìÖ–î–∞—Ç–∞: {date[-2] + date[-1] + '.' + date[5] + date[6] + '.' + date[:4] if date != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
    text += f"‚è∞ –í—Ä–µ–º—è: {appointment.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üöó VIN: {appointment.get('vin', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {appointment.get('problem', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üì¶ –ù—É–∂–Ω—ã –∑–∞–ø—á–∞—Å—Ç–∏: {appointment.get('parts', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    # text += f" –ò–º—è: {user_data['username']}\n"

    markup = InlineKeyboardMarkup(row_width=2)
    confirm_btn = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes")
    change_btn = InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="command:/change_appointment")
    cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
    markup.add(confirm_btn, change_btn, cancel_btn)

    bot.send_message(user_data['chat_id'], text, reply_markup=markup)


# –ó–ê–Ø–í–ö–ê

# –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_yes'))
@error_handler
def handle_confirmation(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in skip_vin: {e}")
    user_id = call.from_user.id
    user_data = get_user_data(user_id)

    if not user_data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    db = Table()
    db.add([
        user_data['appointment']['date'],
        user_data['appointment']['time'][:2],
        user_id,
        user_data['appointment']['problem_type'] + '|' + user_data['appointment']['problem'],
        user_data['appointment']['vin'],
        user_data['appointment']['parts'],
        1,
        user_data['appointment']['model'],
        user_data['appointment']['phone'],
        call.from_user.username
    ])
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=call.message.text + "\n\n‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    )

    user_data['last_message'] = call
    send_to_other_chat(call.from_user, GROUP_CHAT_ID, user_id)


@error_handler
def send_to_other_chat(user, target_chat_id, user_id):
    user_data = get_user_data(user_id)
    ap = Appointment(0)
    info = ap.info_by_user(user_id=user_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete'), )
    date, time, problem, mechanic, duration, lift, vin = info
    text = ''
    text += f"üìÖ{date[-2] + date[-1] + '.' + date[5] + date[6] + '.' + date[:4]}\n"
    text += f"üïí{time}:00\n"
    text += f"üõ†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {problem}\n"
    text += f"üìû –ù–æ–º–µ—Ä: {user_data['appointment']['phone']}\n"
    text += f" –ò–º—è: {user_data['username']}\n"

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete'), )

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accepted:{user.id}'),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'declined:{user.id}'),
        # InlineKeyboardButton("–∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É", callback_data=f'zapisi')
    )
    msg = (
        f"Username: @{user.username or '–Ω–µ—Ç'}\n"
        f"ID: {user.id}\n\n"
        f"\n{text}\n"
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ VIN:\n {', '.join(vin_info(vin)) if vin else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    )
    bot.send_message(target_chat_id, msg, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith(('accepted:', 'declined:')))
@error_handler
def handle_decision(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in skip_vin: {e}")
    data = call.data.split(':')
    action, target_user_id = data[0], data[1]
    accepted = action == 'accepted'
    decision_text = "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞" if accepted else "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    if accepted:
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
        ap = Appointment(0)
        info = ap.info_by_user(user_id=target_user_id)
        date = info[0]
        time = info[1]
        problem = info[2]
        bot.send_message(int(target_user_id),
                         f"{decision_text}\nüìÖ–î–∞—Ç–∞ {date[-2] + date[-1] + '.' + date[5] + date[6] + '.' + date[:4]}\nüïí–í—Ä–µ–º—è {time}:00\nüõ†Ô∏è–ü—Ä–æ–±–ª–µ–º–∞ {problem}\n –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.")
    else:
        bot.send_message(int(target_user_id), f"{decision_text}")


# –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï

# –ù–ï –£–ë–ò–†–ê–¢–¨ –ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨–ù–ï –£–ë–ò–†–ê–¢–¨
# @bot.callback_query_handler(func=lambda call: call.data.startswith('zapisi'))
# @error_handler
# def zapisi(call):
#     user_id = call.from_user.id
#     user_data = get_user_data(user_id)
#     min_date = date.today()
#     max_date = min_date + timedelta(days=14)
#     calendar, step = WMonthTelegramCalendar(min_date=min_date, max_date=max_date, locale='ru').build()
#     bot.send_message(GROUP_CHAT_ID, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
#                      parse_mode='HTML', reply_markup=calendar)

# @error_handler
# def send_to_mech(user_id):
#     user_data = get_user_data(user_id)
#     ap = Appointment(0)
#     info = ap.info_by_user(user_id=user_id)
#     markup = InlineKeyboardMarkup()
#     markup.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete'), )
#     date, time, problem, mechanic, duration, lift, vin = info
#     text = ''
#     text += f"üìÖ{date[-2] + date[-1] + '.' + date[5] + date[6] + '.' + date[:4]}\n"
#     text += f"üïí{time}:00\n"
#     text += f"üõ†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {problem}\n"
#     text += f"üìû –ù–æ–º–µ—Ä: {user_data['appointment']['phone']}\n"
#     text += f" –ò–º—è: {user_data['username']}\n"
#
#     msg = (
#         f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"
#         f"Username: @{user.username or '–Ω–µ—Ç'}\n"
#         f"ID: {user.id}\n\n"
#         f"\n{text}\n"
#         f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ VIN:\n {', '.join(vin_info(vin)) if vin else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
#     )
#     mechs_id_list = [
# #                 1576118658, #—Å–∞—à–∞ —Å–æ–ª–æ–º–∞
# #                 7645088510, #—Ä—É—Å–ª–∞–Ω
# #                 1497728313, #alexnader
# #                 1062205174] #–¥–µ–Ω–∏—Å
#     [bot.send_message(i, msg) for i in mechs_id_list]

@bot.callback_query_handler(func=lambda call: call.data.startswith('cbcal_0'))
@error_handler
def handle_view_calendar(call):
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.warning(f"Callback expired in skip_vin: {e}")
    min_date = date.today()
    max_date = min_date + timedelta(days=14)

    result, key, step = WMonthTelegramCalendar(min_date=min_date, max_date=max_date, locale='ru').process(call.data)

    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π",
                              call.message.chat.id, call.message.message_id, reply_markup=key)
    elif result:
        db = Table()
        appointments = db.appointments_by_date(str(result))
        mechs = {'1': '–°–∞—à–∞',
                 '2': '–î–µ–Ω–∏—Å'}
        if not appointments:
            text = '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'
        else:
            text = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {result}:\n\n"
            for time, problem, mechanic in appointments:
                text += f"üïí {time}:00 - {problem}"
                if mechanic:
                    text += f", –º–µ—Ö–∞–Ω–∏–∫: {mechs[mechanic]}"
                text += "\n"

        bot.edit_message_text(text, call.message.chat.id, call.message.message_id)

# bot = telebot.TeleBot(TOKEN)
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

user_id_list = [5506674973, #–º–∞–∫–∞–Ω
                997097309, #–º–∞–∫–∞—Ä
                24260386,] #–ø–∞–ø–∞
#                 1576118658, #—Å–∞—à–∞ —Å–æ–ª–æ–º–∞
#                 7645088510, #—Ä—É—Å–ª–∞–Ω
#                 1497728313, #alexnader
#                 1062205174] #–¥–µ–Ω–∏—Å
def id_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    def wrapper(*args, **kwargs):
        user_info = None
        if args[0] in user_id_list:
            # print('first if')
            return func(*args, **kwargs)
        if args and hasattr(args[0], 'from_user'):
            user = args[0].from_user
            # print('second if')
            if user.id in user_id_list:
                return func(*args, **kwargs)
    return wrapper

# @id_handler
# def get_user_data(user_id):
#     """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     if user_id not in user_sessions:
#         user_sessions[user_id] = {
#             'current_app': 0,
#             'chat_id': 0,
#             'username': f"user_{user_id}",
#             'notes_data': {},
#             'editing_note_id': None,
#             'editing_note_text': None,
#             'appointment': {'problem': '', 'vin': '', 'parts': 0, 'time': '', 'date': '', 'problem_type': ''},
#
#         }
#     return user_sessions[user_id]


@bot.message_handler(commands=['1'])
@id_handler
def start_command_back(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    username = message.from_user.username or message.from_user.first_name or f"user_{user_id}"
    user_data['username'] = username
    user_data['chat_id'] = message.chat.id
    show_back_menu(user_data['chat_id'])


@id_handler
def show_back_menu(chat_id):
    markup = InlineKeyboardMarkup(row_width=1)

    btn_set_id = InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        callback_data="today_appointments"
    )
    btn_change_appointment = InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å –∑–∞—è–≤–∫—É",
        callback_data="choose_appointment"
    )

    btn_mechs_workload = InlineKeyboardButton(
        text="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –º–µ—Ö–∞–Ω–∏–∫–æ–≤",
        callback_data="mechs_workload"
    )

    markup.add(btn_set_id, btn_change_appointment, btn_mechs_workload)
    bot.send_message(
        chat_id,
        "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'today_appointments')
@id_handler
def today_appointments(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    db = Table()
    res = db.today_appointments()
    if not res:
        text = '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'
    else:
        mechs = {'1': '–°–∞—à–∞',
                 '2': '–î–µ–Ω–∏—Å',}
        liftt = {'1': '4',
                 '2': '2',
                 '3': '–±–µ–∑'}
        text = f"–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        for time, problem, mechanic, duration, lift in res:
            text += f"üïí {time}:00 - {problem}"
            text += f", –º–µ—Ö–∞–Ω–∏–∫: {mechanic}\n"
            text += f"      –ø–æ–¥—ä–µ–º–Ω–∏–∫: {lift}"
            text += f" –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"
            text += "\n\n"
    bot.send_message(chat_id=user_data['chat_id'],
                     text=text)

@bot.callback_query_handler(func=lambda call: call.data == 'mechs_workload')
@id_handler
def choose_date_for_mechs_workload(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    min_date = date.today()
    max_date = min_date + timedelta(days=14)
    calendar, step = WMonthTelegramCalendar(min_date=min_date, max_date=max_date, locale='ru').build()
    bot.send_message(user_data['chat_id'],
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
                     parse_mode='HTML', reply_markup=calendar)


@bot.callback_query_handler(func=lambda call: call.data.startswith('cbcal_0'))
@id_handler
def handle_date_for_mechs_workload_calendar(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    min_date = date.today()
    max_date = min_date + timedelta(days=14)

    result, key, step = WMonthTelegramCalendar(min_date=min_date, max_date=max_date, locale='ru').process(call.data)

    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", user_data['chat_id'], call.message.message_id, reply_markup=key)
    elif result:
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {result}", user_data['chat_id'], call.message.message_id)
        db = Table()
        res = db.appointments_by_date(str(result))
        print(res)
        text = ''
        if not res:
            text = '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'
        else:
            mechs = {'–°–∞—à–∞': '',
                     '–î–µ–Ω–∏—Å': '',
                     '–°–∞—à–∞ –¥—Ä—É–≥–æ–π': ''}
            for time, problem, mechanic, duration, lift in res:
                mechs[mechanic] += f'üïí {time}:00 - {time + duration}:00 \n–ü—Ä–æ–±–ª–µ–º–∞: {problem}\n–ø–æ–¥—ä–µ–º–Ω–∏–∫: {lift}\n'
        for mech, txt in mechs.items():
            print(mech, txt)
            if txt:
                text += f'{mech}:\n{txt}\n'
        bot.send_message(chat_id=user_data['chat_id'],
                         text=text)

#
# def mechs_workload(call):
#     bot.answer_callback_query(call.id)
#     user_id = call.from_user.id
#     user_data = get_user_data(user_id)
#     db = Table()
#     res = db.appointments_by_date()
#     if not res:
#         text = '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'
#     else:
#         mechs = {'1': '–°–∞—à–∞',
#                  '2': '–î–µ–Ω–∏—Å'}
#         liftt = {'1': '4',
#                  '2': '2',
#                  '3': '–±–µ–∑'}
#         text = f"–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
#         for time, problem, mechanic, duration, lift in res:
#             text += f"üïí {time}:00 - {problem}"
#             text += f", –º–µ—Ö–∞–Ω–∏–∫: {mechs[str(mechanic)]}\n"
#             text += f"      –ø–æ–¥—ä–µ–º–Ω–∏–∫: {liftt[str(lift)]}"
#             text += f" –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"
#             text += "\n\n"
#     bot.send_message(chat_id=user_data['chat_id'],
#                      text=text)

@bot.callback_query_handler(func=lambda call: call.data == 'choose_appointment')
@id_handler
def choose_appointment(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    db = Table()
    res = db.not_confirmed_appointments()
    print(res)
    markup = InlineKeyboardMarkup()
    if not res:
        text = '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π'
    else:
        for id, date, time, problem in res:
            text = f"{date} {time}:00 - {problem}" #date[-2] + date[-1] + '.' + date[5] + date[6]
            markup.add(InlineKeyboardButton(text=text, callback_data=f'app:{id}'))
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å"
    bot.send_message(chat_id=user_data['chat_id'],
                     text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('app:'))
@id_handler
def handle_choose_app(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    data = call.data.split(':')
    user_data['current_app'] = data[1]
    at = Appointment(data[1])
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='delete'),)
    date_, time_, problem_, mechanic_, duration_, lift_ = at.info()[0]
    text = '–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å:\n'
    text += f"{date_[-2] + date_[-1] + '.' + date_[5] + date_[6]}"
    text += f" {time_}:00\n{problem_}\n"
    text += f"–º–µ—Ö–∞–Ω–∏–∫: {mechanic_}\n"
    text += f"–ø–æ–¥—ä–µ–º–Ω–∏–∫: {lift_}\n"
    text += f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_}"
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text, reply_markup=markup
    )
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', callback_data='date_time'),
               InlineKeyboardButton(text='–ü—Ä–æ–±–ª–µ–º–∞', callback_data='probl'),
               InlineKeyboardButton(text='–ú–µ—Ö–∞–Ω–∏–∫', callback_data='mech'),
               InlineKeyboardButton(text='–ü–æ–¥—ä–µ–º–Ω–∏–∫', callback_data='lift'),
               InlineKeyboardButton(text='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', callback_data='duration'), )
    bot.send_message(chat_id=user_data['chat_id'], text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'delete')
@id_handler
def delete(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    bot.send_message(user_data['chat_id'],
                     f"–í–≤–µ–¥–∏—Ç–µ <code>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code> —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", parse_mode='HTML')
    bot.register_next_step_handler(call.message, confrim_delete)

@id_handler
def confrim_delete(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        db = Appointment(user_data['current_app'])
        result = db.delete_app()
        bot.send_message(message.chat.id, result)
    else:
        bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:{user_data["current_app"]}')

@bot.callback_query_handler(func=lambda call: call.data == 'date_time')
@id_handler
def date_time(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    min_date = date.today()
    max_date = min_date + timedelta(days=14)
    calendar, step = MyTranslationCalendar(min_date=min_date, max_date=max_date, locale='ru').build()
    bot.send_message(user_data['chat_id'],
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
                     parse_mode='HTML', reply_markup=calendar)


@bot.callback_query_handler(func=lambda call: call.data.startswith('my_0'))
@id_handler
def handle_appointment_calendar_back(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    min_date = date.today()
    max_date = min_date + timedelta(days=14)

    result, key, step = MyTranslationCalendar(min_date=min_date, max_date=max_date, locale='ru').process(call.data)

    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", user_data['chat_id'], call.message.message_id, reply_markup=key)
    elif result:
        if result.weekday() >= 5:
            bot.send_message(user_data['chat_id'], '–°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –Ω–µ—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å')
            return

        user_data['appointment']['date'] = str(result)
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {result}", user_data['chat_id'], call.message.message_id)

        db = Table()
        times = [10, 11, 12, 13, 14, 15, 16, 17, 18]
        markup = InlineKeyboardMarkup(row_width=1)

        for time in times:
            btn_time = InlineKeyboardButton(text=f"{time}:00", callback_data=f'time!{time}')
            markup.add(btn_time)

        if times:
            bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, f"–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É")


# –í–†–ï–ú–Ø
@bot.callback_query_handler(func=lambda call: call.data == 'duration')
@id_handler
def duration(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    msg = bot.send_message(chat_id=user_data['chat_id'], text='–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
    bot.register_next_step_handler(msg, duration_handler)


@id_handler
def duration_handler(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    at = Appointment(user_data['current_app'])
    print(message.text)
    at.set_duration(message.text)
    msg = bot.send_message(chat_id=user_data['chat_id'], text=f'–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞: {message.text}')
    # –í–º–µ—Å—Ç–æ start_command(message) –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø—Ü–∏–π
    show_options_menu(user_id, message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == 'probl')
@id_handler
def probl(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    msg = bot.send_message(chat_id=user_data['chat_id'], text='–≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É')
    bot.register_next_step_handler(msg, probl_handler)


@id_handler
def probl_handler(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    at = Appointment(user_data['current_app'])
    at.set_problem(message.text)
    msg = bot.send_message(chat_id=user_data['chat_id'], text=f'–ø—Ä–æ–±–ª–µ–º–∞: {message.text}')
    # –í–º–µ—Å—Ç–æ start_command(message) –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø—Ü–∏–π
    show_options_menu(user_id, message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == 'mech')
@id_handler
def mech(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–°–∞—à–∞', callback_data='mech:–°–∞—à–∞'),
               InlineKeyboardButton(text='–î–µ–Ω–∏—Å', callback_data='mech:–î–µ–Ω–∏—Å'),
               InlineKeyboardButton(text='–°–∞—à–∞ –¥—Ä—É–≥–æ–π', callback_data='mech:–°–∞—à–∞ –¥—Ä—É–≥–æ–π'), )
    msg = bot.send_message(chat_id=user_data['chat_id'], text='–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∞', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('mech:'))
@id_handler
def mech_handler(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    data = call.data.split(":")[1]
    at = Appointment(user_data['current_app'])
    at.set_mechanic(data)
    msg = bot.send_message(chat_id=user_data['chat_id'], text=f'–ú–µ—Ö–∞–Ω–∏–∫: {data}')
    # –í–º–µ—Å—Ç–æ start_command(msg) –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø—Ü–∏–π
    show_options_menu(user_id, call.message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == 'lift')
@id_handler
def lift(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='4', callback_data='lift:4'),
               InlineKeyboardButton(text='2', callback_data='lift:2'),
               InlineKeyboardButton(text='–ë–µ–∑', callback_data='lift:–±–µ–∑'), )
    msg = bot.send_message(chat_id=user_data['chat_id'], text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—ä–µ–º–Ω–∏–∫', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('lift:'))
@id_handler
def lift_handler(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    data = call.data.split(":")[1]
    at = Appointment(user_data['current_app'])
    at.set_lift(data)
    msg = bot.send_message(chat_id=user_data['chat_id'], text=f'–ü–æ–¥—ä–µ–º–Ω–∏–∫: {data}')
    # –í–º–µ—Å—Ç–æ start_command(msg) –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø—Ü–∏–π
    show_options_menu(user_id, call.message.chat.id)


# –í–†–ï–ú–Ø
@bot.callback_query_handler(func=lambda call: call.data.startswith('time!'))
@id_handler
def handle_time_back(call):
    bot.answer_callback_query(call.id)
    data = call.data.split('!')
    time_val = int(data[1])
    user_id = call.from_user.id
    user_data = get_user_data(user_id)

    user_data['appointment']['time'] = time_val

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏:{user_data['appointment']['date']} {time_val:02d}:00"
    )
    at = Appointment(user_data['current_app'])
    print(user_data['current_app'], user_data['appointment']['time'])
    print(at.change_date_time(time=user_data['appointment']['time'], date=user_data['appointment']['date']))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø—Ü–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    show_options_menu(user_id, call.message.chat.id)


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø—Ü–∏–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_choose_app)
@id_handler
def show_options_menu(user_id, chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_choose_app)"""
    user_data = get_user_data(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
    at = Appointment(user_data['current_app'])
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete'),)
    try:
        date_, time_, problem_, mechanic_, duration_, lift_ = at.info()[0]
        text = '–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å:\n'
        text += f"{date_[-2] + date_[-1] + '.' + date_[5] + date_[6]}"
        text += f" {time_}:00\n{problem_}\n"
        text += f"–º–µ—Ö–∞–Ω–∏–∫: {mechanic_}\n"
        text += f"–ø–æ–¥—ä–µ–º–Ω–∏–∫: {lift_}\n"
        text += f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_}"

        bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
    except Exception as e:
        print(f"Error getting appointment info: {e}")
        bot.send_message(chat_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø—Ü–∏–π
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', callback_data='date_time'),
               InlineKeyboardButton(text='–ü—Ä–æ–±–ª–µ–º–∞', callback_data='probl'),
               InlineKeyboardButton(text='–ú–µ—Ö–∞–Ω–∏–∫', callback_data='mech'),
               InlineKeyboardButton(text='–ü–æ–¥—ä–µ–º–Ω–∏–∫', callback_data='lift'),
               InlineKeyboardButton(text='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', callback_data='duration'), )
    bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=markup)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
