from datetime import date, timedelta
import telebot
from django.urls import re_path
from telegram_bot_calendar import DetailedTelegramCalendar, WMonthTelegramCalendar
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton
)
import config
from db import vin_info, Table, Appointment
from –ª—è–ª—è–ª—è import MyTranslationCalendar
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
# === CONFIGURATION ===

TOKEN = config.TOKEN_SECOND
GROUP_CHAT_ID = config.chat_id

bot = telebot.TeleBot(TOKEN)
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}


def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            'current_app': 0,
            'chat_id': 0,
            'username': f"user_{user_id}",
            'notes_data': {},
            'editing_note_id': None,
            'editing_note_text': None,
            'appointment': {'problem': '', 'vin': '', 'parts': 0, 'time': '', 'date': '', 'problem_type': ''},

        }
    return user_sessions[user_id]


@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    username = message.from_user.username or message.from_user.first_name or f"user_{user_id}"
    user_data['username'] = username
    user_data['chat_id'] = message.chat.id
    show_second_menu(user_data['chat_id'])


def show_second_menu(chat_id):
    markup = InlineKeyboardMarkup(row_width=1)

    btn_set_id = InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        callback_data="today_appointments"
    )
    btn_change_appointment = InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å –∑–∞—è–≤–∫—É",
        callback_data="choose_appointment"
    )

    btn_mechs_workload = InlineKeyboardButton(
        text="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –º–µ—Ö–∞–Ω–∏–∫–æ–≤",
        callback_data="mechs_workload"
    )

    markup.add(btn_set_id, btn_change_appointment, btn_mechs_workload)
    bot.send_message(
        chat_id,
        "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'today_appointments')
def today_appointments(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    db = Table()
    res = db.today_appointments()
    if not res:
        text = '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'
    else:
        mechs = {'1': '–°–∞—à–∞',
                 '2': '–î–µ–Ω–∏—Å',}
        liftt = {'1': '4',
                 '2': '2',
                 '3': '–±–µ–∑'}
        text = f"–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        for time, problem, mechanic, duration, lift in res:
            text += f"üïí {time}:00 - {problem}"
            text += f", –º–µ—Ö–∞–Ω–∏–∫: {mechanic}\n"
            text += f"      –ø–æ–¥—ä–µ–º–Ω–∏–∫: {lift}"
            text += f" –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"
            text += "\n\n"
    bot.send_message(chat_id=user_data['chat_id'],
                     text=text)

@bot.callback_query_handler(func=lambda call: call.data == 'mechs_workload')
def choose_date_for_mechs_workload(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    min_date = date.today()
    max_date = min_date + timedelta(days=14)
    calendar, step = WMonthTelegramCalendar(min_date=min_date, max_date=max_date, locale='ru').build()
    bot.send_message(user_data['chat_id'],
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
                     parse_mode='HTML', reply_markup=calendar)


@bot.callback_query_handler(func=lambda call: call.data.startswith('cbcal_0'))
def handle_date_for_mechs_workload_calendar(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    min_date = date.today()
    max_date = min_date + timedelta(days=14)

    result, key, step = WMonthTelegramCalendar(min_date=min_date, max_date=max_date, locale='ru').process(call.data)

    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", user_data['chat_id'], call.message.message_id, reply_markup=key)
    elif result:
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {result}", user_data['chat_id'], call.message.message_id)
        db = Table()
        res = db.appointments_by_date(str(result))
        print(res)
        text = ''
        if not res:
            text = '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'
        else:
            mechs = {'–°–∞—à–∞': '',
                     '–î–µ–Ω–∏—Å': '',
                     '–°–∞—à–∞ –¥—Ä—É–≥–æ–π': ''}
            for time, problem, mechanic, duration, lift in res:
                mechs[mechanic] += f'üïí {time}:00 - {time + duration}:00 \n–ü—Ä–æ–±–ª–µ–º–∞: {problem}\n–ø–æ–¥—ä–µ–º–Ω–∏–∫: {lift}\n'
        for mech, txt in mechs.items():
            print(mech, txt)
            if txt:
                text += f'{mech}:\n{txt}\n'
        bot.send_message(chat_id=user_data['chat_id'],
                         text=text)

#
# def mechs_workload(call):
#     bot.answer_callback_query(call.id)
#     user_id = call.from_user.id
#     user_data = get_user_data(user_id)
#     db = Table()
#     res = db.appointments_by_date()
#     if not res:
#         text = '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'
#     else:
#         mechs = {'1': '–°–∞—à–∞',
#                  '2': '–î–µ–Ω–∏—Å'}
#         liftt = {'1': '4',
#                  '2': '2',
#                  '3': '–±–µ–∑'}
#         text = f"–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
#         for time, problem, mechanic, duration, lift in res:
#             text += f"üïí {time}:00 - {problem}"
#             text += f", –º–µ—Ö–∞–Ω–∏–∫: {mechs[str(mechanic)]}\n"
#             text += f"      –ø–æ–¥—ä–µ–º–Ω–∏–∫: {liftt[str(lift)]}"
#             text += f" –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"
#             text += "\n\n"
#     bot.send_message(chat_id=user_data['chat_id'],
#                      text=text)

@bot.callback_query_handler(func=lambda call: call.data == 'choose_appointment')
def choose_appointment(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    db = Table()
    res = db.not_confirmed_appointments()
    print(res)
    markup = InlineKeyboardMarkup()
    if not res:
        text = '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π'
    else:
        for id, date, time, problem in res:
            text = f"{date} {time}:00 - {problem}" #date[-2] + date[-1] + '.' + date[5] + date[6]
            markup.add(InlineKeyboardButton(text=text, callback_data=f'app:{id}'))
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å"
    bot.send_message(chat_id=user_data['chat_id'],
                     text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('app:'))
def handle_choose_app(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    data = call.data.split(':')
    user_data['current_app'] = data[1]
    at = Appointment(data[1])
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='delete'),)
    date_, time_, problem_, mechanic_, duration_, lift_ = at.info()[0]
    text = '–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å:\n'
    text += f"{date_[-2] + date_[-1] + '.' + date_[5] + date_[6]}"
    text += f" {time_}:00\n{problem_}\n"
    text += f"–º–µ—Ö–∞–Ω–∏–∫: {mechanic_}\n"
    text += f"–ø–æ–¥—ä–µ–º–Ω–∏–∫: {lift_}\n"
    text += f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_}"
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text, reply_markup=markup
    )
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', callback_data='date_time'),
               InlineKeyboardButton(text='–ü—Ä–æ–±–ª–µ–º–∞', callback_data='probl'),
               InlineKeyboardButton(text='–ú–µ—Ö–∞–Ω–∏–∫', callback_data='mech'),
               InlineKeyboardButton(text='–ü–æ–¥—ä–µ–º–Ω–∏–∫', callback_data='lift'),
               InlineKeyboardButton(text='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', callback_data='duration'), )
    bot.send_message(chat_id=user_data['chat_id'], text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'delete')
def delete(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    bot.send_message(user_data['chat_id'],
                     f"–í–≤–µ–¥–∏—Ç–µ <code>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code> —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", parse_mode='HTML')
    bot.register_next_step_handler(call.message, confrim_delete)

def confrim_delete(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        db = Appointment(user_data['current_app'])
        result = db.delete_app()
        bot.send_message(message.chat.id, result)
    else:
        bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:{user_data["current_app"]}')

@bot.callback_query_handler(func=lambda call: call.data == 'date_time')
def date_time(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    min_date = date.today()
    max_date = min_date + timedelta(days=14)
    calendar, step = MyTranslationCalendar(min_date=min_date, max_date=max_date, locale='ru').build()
    bot.send_message(user_data['chat_id'],
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
                     parse_mode='HTML', reply_markup=calendar)


@bot.callback_query_handler(func=lambda call: call.data.startswith('my_0'))
def handle_appointment_calendar(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    min_date = date.today()
    max_date = min_date + timedelta(days=14)

    result, key, step = MyTranslationCalendar(min_date=min_date, max_date=max_date, locale='ru').process(call.data)

    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", user_data['chat_id'], call.message.message_id, reply_markup=key)
    elif result:
        if result.weekday() >= 5:
            bot.send_message(user_data['chat_id'], '–°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –Ω–µ—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å')
            return

        user_data['appointment']['date'] = str(result)
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {result}", user_data['chat_id'], call.message.message_id)

        db = Table()
        times = [10, 11, 12, 13, 14, 15, 16, 17, 18]
        markup = InlineKeyboardMarkup(row_width=1)

        for time in times:
            btn_time = InlineKeyboardButton(text=f"{time}:00", callback_data=f'time!{time}')
            markup.add(btn_time)

        if times:
            bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, f"–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É")


# –í–†–ï–ú–Ø
@bot.callback_query_handler(func=lambda call: call.data == 'duration')
def duration(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    msg = bot.send_message(chat_id=user_data['chat_id'], text='–≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
    bot.register_next_step_handler(msg, duration_handler)


def duration_handler(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    at = Appointment(user_data['current_app'])
    print(message.text)
    at.set_duration(message.text)
    msg = bot.send_message(chat_id=user_data['chat_id'], text=f'–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞: {message.text}')
    # –í–º–µ—Å—Ç–æ start_command(message) –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø—Ü–∏–π
    show_options_menu(user_id, message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == 'probl')
def probl(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    msg = bot.send_message(chat_id=user_data['chat_id'], text='–≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É')
    bot.register_next_step_handler(msg, probl_handler)


def probl_handler(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    at = Appointment(user_data['current_app'])
    at.set_problem(message.text)
    msg = bot.send_message(chat_id=user_data['chat_id'], text=f'–ø—Ä–æ–±–ª–µ–º–∞: {message.text}')
    # –í–º–µ—Å—Ç–æ start_command(message) –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø—Ü–∏–π
    show_options_menu(user_id, message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == 'mech')
def mech(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–°–∞—à–∞', callback_data='mech:–°–∞—à–∞'),
               InlineKeyboardButton(text='–î–µ–Ω–∏—Å', callback_data='mech:–î–µ–Ω–∏—Å'),
               InlineKeyboardButton(text='–°–∞—à–∞ –¥—Ä—É–≥–æ–π', callback_data='mech:–°–∞—à–∞ –¥—Ä—É–≥–æ–π'), )
    msg = bot.send_message(chat_id=user_data['chat_id'], text='–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∞', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('mech:'))
def mech_handler(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    data = call.data.split(":")[1]
    at = Appointment(user_data['current_app'])
    at.set_mechanic(data)
    msg = bot.send_message(chat_id=user_data['chat_id'], text=f'–ú–µ—Ö–∞–Ω–∏–∫: {data}')
    # –í–º–µ—Å—Ç–æ start_command(msg) –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø—Ü–∏–π
    show_options_menu(user_id, call.message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == 'lift')
def lift(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='4', callback_data='lift:4'),
               InlineKeyboardButton(text='2', callback_data='lift:2'),
               InlineKeyboardButton(text='–ë–µ–∑', callback_data='lift:–±–µ–∑'), )
    msg = bot.send_message(chat_id=user_data['chat_id'], text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—ä–µ–º–Ω–∏–∫', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('lift:'))
def lift_handler(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    data = call.data.split(":")[1]
    at = Appointment(user_data['current_app'])
    at.set_lift(data)
    msg = bot.send_message(chat_id=user_data['chat_id'], text=f'–ü–æ–¥—ä–µ–º–Ω–∏–∫: {data}')
    # –í–º–µ—Å—Ç–æ start_command(msg) –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø—Ü–∏–π
    show_options_menu(user_id, call.message.chat.id)


# –í–†–ï–ú–Ø
@bot.callback_query_handler(func=lambda call: call.data.startswith('time!'))
def handle_time(call):
    bot.answer_callback_query(call.id)
    data = call.data.split('!')
    time_val = int(data[1])
    user_id = call.from_user.id
    user_data = get_user_data(user_id)

    user_data['appointment']['time'] = time_val

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏:{user_data['appointment']['date']} {time_val:02d}:00"
    )
    at = Appointment(user_data['current_app'])
    print(user_data['current_app'], user_data['appointment']['time'])
    print(at.change_date_time(time=user_data['appointment']['time'], date=user_data['appointment']['date']))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø—Ü–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    show_options_menu(user_id, call.message.chat.id)


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –æ–ø—Ü–∏–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_choose_app)
def show_options_menu(user_id, chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_choose_app)"""
    user_data = get_user_data(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
    at = Appointment(user_data['current_app'])
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete'),)
    try:
        date_, time_, problem_, mechanic_, duration_, lift_ = at.info()[0]
        text = '–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å:\n'
        text += f"{date_[-2] + date_[-1] + '.' + date_[5] + date_[6]}"
        text += f" {time_}:00\n{problem_}\n"
        text += f"–º–µ—Ö–∞–Ω–∏–∫: {mechanic_}\n"
        text += f"–ø–æ–¥—ä–µ–º–Ω–∏–∫: {lift_}\n"
        text += f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_}"

        bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
    except Exception as e:
        print(f"Error getting appointment info: {e}")
        bot.send_message(chat_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø—Ü–∏–π
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', callback_data='date_time'),
               InlineKeyboardButton(text='–ü—Ä–æ–±–ª–µ–º–∞', callback_data='probl'),
               InlineKeyboardButton(text='–ú–µ—Ö–∞–Ω–∏–∫', callback_data='mech'),
               InlineKeyboardButton(text='–ü–æ–¥—ä–µ–º–Ω–∏–∫', callback_data='lift'),
               InlineKeyboardButton(text='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', callback_data='duration'), )
    bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=markup)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
